from bisect import bisect_left, bisect_right

class Solution:
    def kthSmallestProduct(self, nums1, nums2, k: int) -> int:
        def countLessEqual(x):
            count = 0
            for a in nums1:
                if a == 0:
                    if x >= 0:
                        count += len(nums2)
                elif a > 0:
                    
                    count += bisect_right(nums2, x // a)
                else:
                   
                    left_idx = bisect_left(nums2, (x + (a + 1)) // a)
                    count += len(nums2) - left_idx
            return count

        nums1.sort()
        nums2.sort()
        left, right = -10**10, 10**10

        while left < right:
            mid = (left + right) // 2
            if countLessEqual(mid) < k:
                left = mid + 1
            else:
                right = mid
        return left
